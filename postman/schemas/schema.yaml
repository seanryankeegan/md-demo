openapi: 3.0.0
info:
  version: 1.0.0
  title: Postman Library API
servers:
  - url: "https://postman-library-api.glitch.me"
paths:
  /:
    get:
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: object 
                required:
                  - message
                properties: 
                  message: 
                    type: string 
  /books:
    get:
      summary: "Retrieves all books in database. Can be filtered by genre, checked-out status, or search keyword"
      operationId: getBooks
      parameters:
        - name: genre
          in: query
          description: 'A genre to filter for'
          required: false
          schema:
            type: string
        - name: checkedOut
          in: query
          description: 'A value true or false representing the checked-out status of a book'
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: 'A search term to match against author/title'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'A list of all books'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: "Adds a book to database"
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                author: 
                  type: string
                  minLength: 1
                genre:
                  type: string
                  minLength: 1
                yearPublished: 
                  type: integer
                checkedOut:
                  type: boolean
              required:
                - title
                - author
                - genre
                - yearPublished
      responses:
        "201":
          description: "Book created successfully"
          content:
            application/json:
              schema:
                type: object
                properties: 
                  message: 
                    type: string
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /books/{id}:
    get:
      summary: "Retrieves a specific book from database"
      operationId: getBook
      parameters:
        - name: id
          in: path
          description: "The id of a book"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'A list of books matching the search genre'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: 'Book not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: "Retrieves all books in database"
      operationId: updateBook
      parameters:
        - name: id
          in: path
          description: 'the id of a book'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Update successful'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  message: 
                    type: string
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: "Deletes book with given id"
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: 'the id of a book'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Delete successful'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  message: 
                    type: string
        '403':
          description: Not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Book:
      type: object 
      required: 
        - id
        - title
        - author
        - genre
        - checkedOut
        - yearPublished
      properties: 
        id: 
          type: string
        title: 
          type: string
        author:
          type: string
        genre: 
          type: string
        checkedOut: 
          type: boolean
        yearPublished: 
          type: integer
        createdAt: 
          type: string
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
        errors:
          type: array
          items: {} # any type. This property supplied in case of request validation errors